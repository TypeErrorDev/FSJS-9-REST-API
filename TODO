Database Connection
    Meets Expectations
        ✔ Sequelize is listed as a dependency in the package.json file @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m49s)
        ✔ Sequelize is configured to use the fsjstd-restapi.db SQLite database that's generated by the npm run seed command @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m49s)
        ✔ A message is written to the console when there’s an error connecting to the database @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m49s)
        ✔ A message is written to the console when the database connection is successfully opened @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m49s)

User Model
    Meets Expectations
    ✔ The user schema follows the provided specification: @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m54s)
        ✔ firstName (String) @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m54s)
        ✔ lastName (String) @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m54s)
        ✔ emailAddress (String) @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m54s)
        ✔ password (String) @started(23-01-20 00:03) @done(23-01-20 14:43) @lasted(14h40m54s)

Course Model
    Meets Expectations
        ✔ The course schema follows the provided specification: @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)
            ✔ title (String) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)
            ✔ description (Text) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)
            ✔ estimatedTime (String) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)
            ✔ materialsNeeded (String) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)
            ✔ userId (created in the model associations with the foreignKey property) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m8s)

Model Associations
    Meets Expectations
        ✔ A HasMany association is defined between the User and Course models @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m13s)
        ✔ A BelongsTo association is defined between the Course and User models @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m13s)

User Routes
    Meets Expectations
        ✔ All of the following user routes are available and return the following data as specified: @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m25s)
            ✔ GET /api/users 200 - Returns the currently authenticated user (ensure that all properties of the user object are included in the response) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m25s)
            ✔ POST /api/users 201 - Creates a user, sets the Location header to "/", and returns no content @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m25s)

    Exceeds Expectations
        ✔ The GET /api/users route filters out the following properties: @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)
            ✔ password @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)
            ✔ createdAt @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)
            ✔ updatedAt @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)
            ✔ Ensure that id, firstName, lastName and email are still included in the response @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)
        ✔ The POST /api/users route checks for and handles SequelizeUniqueConstraintError errors by returning a 400 status code and error message @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m38s)

Course Routes
    Meets Expectations
        ✔ All of the following course routes are available and return the following data as specified: @started(23-01-20 00:03) @done(23-01-21 00:20) @lasted(1d17m45s)
            ✔ GET /api/courses 200 - Returns a list of courses (including the user object of each course its owner) @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m43s)
            ✔ GET /api/courses/:id 200 - Returns the course (including the user object of each course its owner) for the provided course ID @started(23-01-20 00:03) @done(23-01-20 14:44) @lasted(14h41m46s)
            ✔ POST /api/courses 201 - Creates a course, sets the Location header to the URI for the course, and returns no content @started(23-01-20 00:03) @done(23-01-20 15:16) @lasted(15h13m30s)
            ✔ PUT /api/courses/:id 204 - Updates a course and returns no content @started(23-01-20 00:03) @done(23-01-20 23:21) @lasted(23h18m49s)
            ✔ DELETE /api/courses/:id 204 - Deletes a course and returns no content @started(23-01-20 00:03) @done(23-01-21 00:20) @lasted(1d17m42s)

    Exceeds Expectations
        ✔ The GET /api/courses and /api/courses/:id routes filter out the following properties: @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m11s)
            ✔ createdAt @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m11s)
            ✔ updatedAt @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m11s)
        ✔ The PUT /api/courses/:id and DELETE /api/courses/:id routes return a 403 status code if the current user doesn't own the requested course @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m27s)

Validation
    Meets Expectations
        ✔ The POST and PUT routes validate if the request body contains the following required values: @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m5s)
            ✔ User @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ firstName @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ lastName @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ emailAddress @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ password @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ Course @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ title @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
            ✔ description @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)
        ✔ Validation error(s) are sent with a 400 status code @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m2s)

    Exceeds Expectations
        ✔ The POST /api/users route validates that the provided email address is a valid email address and isn't already associated with an existing user @started(23-01-20 00:03) @done(23-01-20 23:34) @lasted(23h31m6s)

Password Security
    Meets Expectations
        ✔ The POST /api/users route hashes the user's password before persisting the user to the database @started(23-01-20 00:03) @done(23-01-20 23:37) @lasted(23h34m39s)
✔ @done(23-01-20 23:37)
Permissions
    Meets Expectations
        ✔ An Express middleware function authenticates the following routes: @started(23-01-20 00:03) @done(23-01-20 23:30) @lasted(23h27m1s)
            ✔ GET /api/users @started(23-01-20 00:03) @done(23-01-20 23:30) @lasted(23h27m1s)
            ✔ POST /api/courses @started(23-01-20 00:03) @done(23-01-20 23:30) @lasted(23h27m1s)
            ✔ PUT /api/courses/:id @started(23-01-20 00:03) @done(23-01-20 23:30) @lasted(23h27m1s)
            ✔ DELETE /api/courses/:id @started(23-01-20 00:03) @done(23-01-20 23:30) @lasted(23h27m1s)
        ✔ When authentication fails a 401 status code is returned @started(23-01-20 00:03) @done(23-01-20 23:36) @lasted(23h33m49s)