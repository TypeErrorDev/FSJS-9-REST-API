Database Connection
    Meets Expectations
        ☐ Sequelize is listed as a dependency in the package.json file @started(23-01-20 00:03)
        ☐ Sequelize is configured to use the fsjstd-restapi.db SQLite database that's generated by the npm run seed command @started(23-01-20 00:03)
        ☐ A message is written to the console when there’s an error connecting to the database @started(23-01-20 00:03)
        ☐ A message is written to the console when the database connection is successfully opened @started(23-01-20 00:03)

User Model
    Meets Expectations
    ☐ The user schema follows the provided specification: @started(23-01-20 00:03)
        ☐ firstName (String) @started(23-01-20 00:03)
        ☐ lastName (String) @started(23-01-20 00:03)
        ☐ emailAddress (String) @started(23-01-20 00:03)
        ☐ password (String) @started(23-01-20 00:03)

Course Model
    Meets Expectations
        ☐ The course schema follows the provided specification: @started(23-01-20 00:03)
            ☐ title (String) @started(23-01-20 00:03)
            ☐ description (Text) @started(23-01-20 00:03)
            ☐ estimatedTime (String) @started(23-01-20 00:03)
            ☐ materialsNeeded (String) @started(23-01-20 00:03)
            ☐ userId (created in the model associations with the foreignKey property) @started(23-01-20 00:03)

Model Associations
    Meets Expectations
        ☐ A HasMany association is defined between the User and Course models @started(23-01-20 00:03)
        ☐ A BelongsTo association is defined between the Course and User models @started(23-01-20 00:03)

User Routes
    Meets Expectations
        ☐ All of the following user routes are available and return the following data as specified: @started(23-01-20 00:03)
        ☐ GET /api/users 200 - Returns the currently authenticated user (ensure that all properties of the user object are included in the response) @started(23-01-20 00:03)
        ☐ POST /api/users 201 - Creates a user, sets the Location header to "/", and returns no content @started(23-01-20 00:03)

    Exceeds Expectations
        ☐ The GET /api/users route filters out the following properties: @started(23-01-20 00:03)
            ☐ password @started(23-01-20 00:03)
            ☐ createdAt @started(23-01-20 00:03)
            ☐ updatedAt @started(23-01-20 00:03)
            ☐ Ensure that id, firstName, lastName and email are still included in the response @started(23-01-20 00:03)
        ☐ The POST /api/users route checks for and handles SequelizeUniqueConstraintError errors by returning a 400 status code and error message @started(23-01-20 00:03)

Course Routes
    Meets Expectations
        ☐ All of the following course routes are available and return the following data as specified: @started(23-01-20 00:03)
            ☐ GET /api/courses 200 - Returns a list of courses (including the user object of each course its owner) @started(23-01-20 00:03)
            ☐ GET /api/courses/:id 200 - Returns the course (including the user object of each course its owner) for the provided course ID @started(23-01-20 00:03)
            ☐ POST /api/courses 201 - Creates a course, sets the Location header to the URI for the course, and returns no content @started(23-01-20 00:03)
            ☐ PUT /api/courses/:id 204 - Updates a course and returns no content @started(23-01-20 00:03)
            ☐ DELETE /api/courses/:id 204 - Deletes a course and returns no content @started(23-01-20 00:03)

    Exceeds Expectations
        ☐ The GET /api/courses and /api/courses/:id routes filter out the following properties: @started(23-01-20 00:03)
            ☐ createdAt @started(23-01-20 00:03)
            ☐ updatedAt @started(23-01-20 00:03)
        ☐ The PUT /api/courses/:id and DELETE /api/courses/:id routes return a 403 status code if the current user doesn't own the requested course @started(23-01-20 00:03)

Validation
    Meets Expectations
        ☐ The POST and PUT routes validate if the request body contains the following required values: @started(23-01-20 00:03)
            ☐ User @started(23-01-20 00:03)
            ☐ firstName @started(23-01-20 00:03)
            ☐ lastName @started(23-01-20 00:03)
            ☐ emailAddress @started(23-01-20 00:03)
            ☐ password @started(23-01-20 00:03)
            ☐ Course @started(23-01-20 00:03)
            ☐ title @started(23-01-20 00:03)
            ☐ description @started(23-01-20 00:03)
        ☐ Validation error(s) are sent with a400 status code @started(23-01-20 00:03)

    Exceeds Expectations
        ☐ The POST /api/users route validates that the provided email address is a valid email address and isn't already associated with an existing user @started(23-01-20 00:03)

Password Security
    Meets Expectations
        ☐ The POST /api/users route validates that the provided email address is a valid email address and isn't already associated with an existing user @started(23-01-20 00:03)

Permissions
    Meets Expectations
        ☐ An Express middleware function authenticates the following routes: @started(23-01-20 00:03)
            ☐ GET /api/users @started(23-01-20 00:03)
            ☐ POST /api/courses @started(23-01-20 00:03)
            ☐ PUT /api/courses/:id @started(23-01-20 00:03)
            ☐ DELETE /api/courses/:id @started(23-01-20 00:03)
        ☐ When authentication fails a 401 status code is returned @started(23-01-20 00:03)